From 5b2961fd6fd907b71ef0c59e5aa063c446a223c9 Mon Sep 17 00:00:00 2001
From: nferre <nferre@50fbe906-d41e-0410-8a96-31537896a350>
Date: Wed, 14 Oct 2009 13:31:41 +0000
Subject: [PATCH] MCI2: High speed mode support

WIP For testing on revD boards

Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com>

git-svn-id: svn://rfolxts01.rfo.atmel.com/at91_sandbox/linux-2.6.x/branches/linux-2.6.30-at91@11605 50fbe906-d41e-0410-8a96-31537896a350
---
 drivers/mmc/host/atmel-mci.c |   53 +++++++++++++++++++++++++++++++++++++++--
 1 files changed, 50 insertions(+), 3 deletions(-)

diff --git a/drivers/mmc/host/atmel-mci.c b/drivers/mmc/host/atmel-mci.c
index c79422e..8b73fe0 100644
--- a/drivers/mmc/host/atmel-mci.c
+++ b/drivers/mmc/host/atmel-mci.c
@@ -7,6 +7,10 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+
+/* High speed mode setting on host & SD card */
+/*#define AT91_HSMODE	1*/
+
 #include <linux/blkdev.h>
 #include <linux/clk.h>
 #include <linux/debugfs.h>
@@ -929,6 +933,29 @@ static void atmci_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 			clkdiv = 255;
 		}
 
+#if defined(AT91_HSMODE)
+		/* Not needed for normal operation previous calculation
+		 * takes 50MHz into account */
+#if 0
+		/* fake clkdiv for tests @ 16,6MHz || 12,5MHz */
+		if (ios->clock >= 25000000) {
+			clkdiv = 3;
+		}
+#endif
+#if 0
+		/* fake clkdiv for tests @ 33MHz || 25MHz */
+		if (ios->clock >= 25000000) {
+			clkdiv = 1;
+		}
+#endif
+#if 0
+		/* fake clkdiv for tests @ 66MHz || 50MHz */
+		if (ios->clock >= 25000000) {
+			clkdiv = 0;
+		}
+#endif
+#endif
+
 		host->mode_reg = MCI_MR_CLKDIV(clkdiv);
 
 		/*
@@ -939,10 +966,23 @@ static void atmci_set_ios(struct mmc_host *mmc, struct mmc_ios *ios)
 		if (mci_has_rwproof())
 			host->mode_reg |= (MCI_MR_WRPROOF | MCI_MR_RDPROOF);
 
-		if (list_empty(&host->queue))
+#if defined(AT91_HSMODE)
+		if (atmci_is_mci2()) {
+			/* setup High Speed mode in relation with card capacity */
+			if (ios->timing == MMC_TIMING_SD_HS)
+				host->cfg_reg |= MCI_CFG_HSMODE;
+			else
+				host->cfg_reg &= ~MCI_CFG_HSMODE;
+		}
+#endif
+
+		if (list_empty(&host->queue)) {
 			mci_writel(host, MR, host->mode_reg);
-		else
+			if (atmci_is_mci2())
+				mci_writel(host, CFG, host->cfg_reg);
+		} else {
 			host->need_clock_update = true;
+		}
 
 		spin_unlock_bh(&host->lock);
 	} else {
@@ -1038,8 +1078,11 @@ static void atmci_request_end(struct atmel_mci *host, struct mmc_request *mrq)
 	 * necessary if set_ios() is called when a different slot is
 	 * busy transfering data.
 	 */
-	if (host->need_clock_update)
+	if (host->need_clock_update) {
 		mci_writel(host, MR, host->mode_reg);
+		if (atmci_is_mci2())
+			mci_writel(host, CFG, host->cfg_reg);
+	}
 
 	host->cur_slot->mrq = NULL;
 	host->mrq = NULL;
@@ -1548,6 +1591,10 @@ static int __init atmci_init_slot(struct atmel_mci *host,
 	mmc->f_min = DIV_ROUND_UP(host->bus_hz, 512);
 	mmc->f_max = host->bus_hz / 2;
 	mmc->ocr_avail	= MMC_VDD_32_33 | MMC_VDD_33_34;
+#if defined(AT91_HSMODE)
+	if (atmci_is_mci2())
+		mmc->caps |= MMC_CAP_SD_HIGHSPEED;
+#endif
 	if (slot_data->bus_width >= 4)
 		mmc->caps |= MMC_CAP_4_BIT_DATA;
 
-- 
1.5.6.5

